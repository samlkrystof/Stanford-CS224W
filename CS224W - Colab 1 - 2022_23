{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"},"colab":{"provenance":[{"file_id":"1dlmOgok0sYviimGvPMfekz16vSQkPFWy","timestamp":1684354241371},{"file_id":"1b9rZIjD7MUEKwYbXZc3dchTBTpzdrvpd","timestamp":1632181904658},{"file_id":"1Jc5CAEGZIvY0vka3mBdf0tqn2TaJr2O1","timestamp":1610408674518},{"file_id":"1gc6u6hItUKY9uJt6GXHaneSYCMaGcxp1","timestamp":1610395347938},{"file_id":"1CqWY4pk7_VFxi8K8v4asr18ed0Hs8FVA","timestamp":1578441204356}],"machine_shape":"hm"}},"cells":[{"cell_type":"markdown","metadata":{"id":"XuXWJLEm2UWS"},"source":["# **CS224W - Colab 1**"]},{"cell_type":"markdown","metadata":{"id":"8gzsP50bF6Gb"},"source":["In this Colab, we will write a full pipeline for **learning node embeddings**.\n","We will go through the following 3 steps.\n","\n","To start, we will load a classic graph in network science, the [Karate Club Network](https://en.wikipedia.org/wiki/Zachary%27s_karate_club). We will explore multiple graph statistics for that graph.\n","\n","We will then work together to transform the graph structure into a PyTorch tensor, so that we can perform machine learning over the graph.\n","\n","Finally, we will finish the first learning algorithm on graphs: a node embedding model. For simplicity, our model here is simpler than DeepWalk / node2vec algorithms taught in the lecture. But it's still rewarding and challenging, as we will write it from scratch via PyTorch.\n","\n","Now let's get started!\n","\n","**Note**: Make sure to **sequentially run all the cells**, so that the intermediate variables / packages will carry over to the next cell"]},{"cell_type":"markdown","metadata":{"id":"Nwwq0nSdmsOL"},"source":["# 1 Graph Basics\n","To start, we will load a classic graph in network science, the [Karate Club Network](https://en.wikipedia.org/wiki/Zachary%27s_karate_club). We will explore multiple graph statistics for that graph."]},{"cell_type":"markdown","metadata":{"id":"FDkpByYYfSzb"},"source":["## Setup\n","We will heavily use NetworkX in this Colab."]},{"cell_type":"code","metadata":{"id":"VWPkJjPAfVNW","executionInfo":{"status":"ok","timestamp":1684529033936,"user_tz":-120,"elapsed":626,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}}},"source":["import networkx as nx"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VqUnYT5qUZYh"},"source":["## Zachary's karate club network\n","\n","The [Karate Club Network](https://en.wikipedia.org/wiki/Zachary%27s_karate_club) is a graph which describes a social network of 34 members of a karate club and documents links between members who interacted outside the club."]},{"cell_type":"code","metadata":{"id":"VIETqEfrfy5Y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529034862,"user_tz":-120,"elapsed":113,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"240f75bc-d8fe-4d0a-f9a9-8720dee0f912"},"source":["G = nx.karate_club_graph()\n","\n","# G is an undirected graph\n","type(G)"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["networkx.classes.graph.Graph"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"hDvf3nm-ors4","colab":{"base_uri":"https://localhost:8080/","height":516},"executionInfo":{"status":"ok","timestamp":1684529034865,"user_tz":-120,"elapsed":104,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"287e3497-6e05-42af-9910-ca2c770f48cd"},"source":["# Visualize the graph\n","nx.draw(G, with_labels = True)"],"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"FX25Y1CrYmgN"},"source":["## Question 1: What is the average degree of the karate club network? (5 Points)"]},{"cell_type":"code","metadata":{"id":"AUhES1VYo3tB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529034867,"user_tz":-120,"elapsed":98,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"9fd7ae32-a6a2-4257-9a69-e4cd3b5de183"},"source":["def average_degree(num_edges: int, num_nodes: int) -> int:\n","  # TODO: Implement this function that takes number of edges\n","  # and number of nodes, and returns the average node degree of \n","  # the graph. Round the result to nearest integer (for example \n","  # 3.3 will be rounded to 3 and 3.7 will be rounded to 4)\n","\n","  avg_degree = 0\n","\n","  ############# Your code here ############\n","  avg_degree = round(2 * num_edges / num_nodes)\n","  #########################################\n","\n","  return avg_degree\n","\n","num_edges = G.number_of_edges()\n","num_nodes = G.number_of_nodes()\n","avg_degree = average_degree(num_edges, num_nodes)\n","print(\"Average degree of karate club network is {}\".format(avg_degree))"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Average degree of karate club network is 5\n"]}]},{"cell_type":"markdown","metadata":{"id":"Fk02fD4vYmZI"},"source":["## Question 2: What is the average clustering coefficient of the karate club network? (5 Points)"]},{"cell_type":"code","metadata":{"id":"k15XKEto1aYJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529034869,"user_tz":-120,"elapsed":87,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"816f9f7c-e0a1-4d3e-bc0a-cb0bb2d32cbd"},"source":["def average_clustering_coefficient(G: nx.Graph) -> float:\n","  # TODO: Implement this function that takes a nx.Graph\n","  # and returns the average clustering coefficient. Round \n","  # the result to 2 decimal places (for example 3.333 will\n","  # be rounded to 3.33 and 3.7571 will be rounded to 3.76)\n","\n","  avg_cluster_coef = 0\n","\n","  ############# Your code here ############\n","  ## Note: \n","  ## 1: Please use the appropriate NetworkX clustering function\n","  avg_cluster_coef = round(nx.average_clustering(G), 2)\n","  \n","\n","  #########################################\n","\n","  return avg_cluster_coef\n","\n","avg_cluster_coef = average_clustering_coefficient(G)\n","print(\"Average clustering coefficient of karate club network is {}\".format(avg_cluster_coef))"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Average clustering coefficient of karate club network is 0.57\n"]}]},{"cell_type":"markdown","metadata":{"id":"zghQ-AhXYmP4"},"source":["## Question 3: What is the PageRank value for node 0 (node with id 0) after one PageRank iteration? (5 Points)\n","\n","Page Rank measures importance of nodes in a graph using the link structure of the web. A “vote” from an important page is worth more. Specifically, if  a page $i$ with importance $r_i$ has $d_i$ out-links, then each link gets $\\frac{r_i}{d_i}$ votes. Thus, the importance of a Page $j$, represented as $r_j$ is the sum of the votes on its in links. \n","$$r_j = \\sum_{i \\rightarrow j} \\frac{r_i}{d_i}$$, where $d_i$ is the out degree of node $i$.\n","\n","The PageRank algorithm (used by Google) outputs a probability distribution which represent the likelihood of a random surfer clicking on links will arrive at any particular page. At each time step, the random surfer has two options\n","- With prob. $\\beta$, follow a link at random \n","- With prob. $1- \\beta$, jump to a random page\n","\n","Thus, the importance of a particular page is calculated with the following PageRank equation:\n"," $$r_j = \\sum_{i \\rightarrow j} \\beta \\frac{r_i}{d_i} + (1 - \\beta) \\frac{1}{N}$$\n","\n","Please complete the code block by implementing the above PageRank equation for node 0.\n","\n","Note - You can refer to more information from the slides here - http://snap.stanford.edu/class/cs224w-2020/slides/04-pagerank.pdf\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"BOGdWjNc6O7x","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529034871,"user_tz":-120,"elapsed":77,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"a99327ac-0cf1-4c84-d863-470bea8ab989"},"source":["def one_iter_pagerank(G: nx.Graph, beta: float, r0 : float, node_id: int) -> float: \n","  # TODO: Implement this function that takes a nx.Graph, beta, r0 and node id.\n","  # The return value r1 is one interation PageRank value for the input node.\n","  # Please round r1 to 2 decimal places.\n","\n","  r1 = 0\n","\n","  ############# Your code here ############\n","  ## Note: \n","  ## 1: You should not use nx.pagerank\n","  neighbors_list = list(G.neighbors(node_id))\n","\n","  neighbors_sum = sum([r0 / G.degree[neighbor] for neighbor in neighbors_list])\n","  r1 = beta * neighbors_sum + (1 - beta) / G.number_of_nodes()\n","  #########################################\n","\n","  return round(r1, 2)\n","\n","beta = 0.8\n","r0 = 1 / G.number_of_nodes()\n","node = 0\n","r1 = one_iter_pagerank(G, beta, r0, node)\n","print(\"The PageRank value for node 0 after one iteration is {}\".format(r1))"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["The PageRank value for node 0 after one iteration is 0.13\n"]}]},{"cell_type":"markdown","metadata":{"id":"icTcOULeYmIu"},"source":["## Question 4: What is the (raw) closeness centrality for the karate club network node 5? (5 Points)\n","\n","The equation for closeness centrality is $c(v) = \\frac{1}{\\sum_{u \\neq v}\\text{shortest path length between } u \\text{ and } v}$"]},{"cell_type":"code","metadata":{"id":"XbCsq_tl-3ok","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529034873,"user_tz":-120,"elapsed":62,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"386afa00-e7ab-456d-eb8e-0a38960ad00a"},"source":["def closeness_centrality(G: nx.Graph, node: int=5) -> float:\n","  # TODO: Implement the function that calculates closeness centrality \n","  # for a node in karate club network. G is the input karate club \n","  # network and node is the node id in the graph. Please round the \n","  # closeness centrality result to 2 decimal places.\n","\n","  closeness = 0\n","\n","  ## Note:\n","  ## 1: You can use networkx closeness centrality function.\n","  ## 2: Notice that networkx closeness centrality returns the normalized \n","  ## closeness directly, which is different from the raw (unnormalized) \n","  ## one that we learned in the lecture.\n","  closeness = nx.closeness_centrality(G, node)\n","  closeness = round(closeness, 2)\n","\n","  #########################################\n","\n","  return closeness\n","\n","node = 5\n","closeness = closeness_centrality(G, node=node)\n","print(\"The node 5 has closeness centrality {}\".format(closeness))"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["The node 5 has closeness centrality 0.38\n"]}]},{"cell_type":"markdown","metadata":{"id":"-MxvowibYl4x"},"source":["# 2 Graph to Tensor\n","We will then work together to transform the graph $G$ into a PyTorch tensor, so that we can perform machine learning over the graph."]},{"cell_type":"markdown","metadata":{"id":"eDA8PosrA-9V"},"source":["## Setup\n","Check if PyTorch is properly installed"]},{"cell_type":"code","metadata":{"id":"ntuPVat_BAf1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529039637,"user_tz":-120,"elapsed":4804,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"a0790fb4-1314-4a7d-ca2d-75df9ca3f68d"},"source":["import torch\n","print(torch.__version__)"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["2.0.1+cu118\n"]}]},{"cell_type":"markdown","metadata":{"id":"fko_2wSKYlun"},"source":["## PyTorch tensor basics\n","\n","We can generate PyTorch tensor with all zeros, ones or random values."]},{"cell_type":"code","metadata":{"id":"W2ySw3m-A9qF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529039638,"user_tz":-120,"elapsed":77,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"a365d57b-aa46-4123-cfe5-a91a6c876b2f"},"source":["# Generate 3 x 4 tensor with all ones\n","ones = torch.ones(3, 4)\n","print(ones)\n","\n","# Generate 3 x 4 tensor with all zeros\n","zeros = torch.zeros(3, 4)\n","print(zeros)\n","\n","# Generate 3 x 4 tensor with random values on the interval [0, 1)\n","random_tensor = torch.rand(3, 4)\n","print(random_tensor)\n","\n","# Get the shape of the tensor\n","print(ones.shape)"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1., 1., 1., 1.],\n","        [1., 1., 1., 1.],\n","        [1., 1., 1., 1.]])\n","tensor([[0., 0., 0., 0.],\n","        [0., 0., 0., 0.],\n","        [0., 0., 0., 0.]])\n","tensor([[0.9335, 0.8674, 0.6916, 0.4809],\n","        [0.8506, 0.4996, 0.6259, 0.7665],\n","        [0.6533, 0.3911, 0.0782, 0.0299]])\n","torch.Size([3, 4])\n"]}]},{"cell_type":"markdown","metadata":{"id":"x8mp66eHBxWC"},"source":["PyTorch tensor contains elements for a single data type, the `dtype`."]},{"cell_type":"code","metadata":{"id":"rQiOvKJJBwq4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529039639,"user_tz":-120,"elapsed":64,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"c823a3f1-7256-46a0-ec9a-0bb71e93ac35"},"source":["# Create a 3 x 4 tensor with all 32-bit floating point zeros\n","zeros = torch.zeros(3, 4, dtype=torch.float32)\n","print(zeros.dtype)\n","\n","# Change the tensor dtype to 64-bit integer\n","zeros = zeros.type(torch.long)\n","print(zeros.dtype)"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.float32\n","torch.int64\n"]}]},{"cell_type":"markdown","metadata":{"id":"I9EfegIRDkk2"},"source":["## Question 5: Get the edge list of the karate club network and transform it into `torch.LongTensor`. What is the `torch.sum` value of `pos_edge_index` tensor? (10 Points)"]},{"cell_type":"code","metadata":{"id":"kEtVxMFID3ZT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529039640,"user_tz":-120,"elapsed":53,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"632cc243-d616-428c-a9fc-6c6ee140df08"},"source":["from typing import List, Tuple\n","def graph_to_edge_list(G: nx.Graph) -> List[Tuple[int, int]]:\n","  # TODO: Implement the function that returns the edge list of\n","  # an nx.Graph. The returned edge_list should be a list of tuples\n","  # where each tuple is a tuple representing an edge connected \n","  # by two nodes.\n","\n","  edge_list = []\n","\n","  ############# Your code here ############\n","  edge_list = list(G.edges())\n","\n","  #########################################\n","\n","  return edge_list\n","\n","def edge_list_to_tensor(edge_list: List[Tuple[int, int]]) -> torch.Tensor:\n","  # TODO: Implement the function that transforms the edge_list to\n","  # tensor. The input edge_list is a list of tuples and the resulting\n","  # tensor should have the shape [2 x len(edge_list)].\n","\n","  edge_index = torch.tensor([])\n","\n","  ############# Your code here ############\n","  edge_index = torch.tensor([list(element) for element in edge_list]).T.contiguous()\n","  #########################################\n","\n","  return edge_index\n","\n","pos_edge_list = graph_to_edge_list(G)\n","pos_edge_index = edge_list_to_tensor(pos_edge_list)\n","print(\"The pos_edge_index tensor has shape {}\".format(pos_edge_index.shape))\n","print(\"The pos_edge_index tensor has sum value {}\".format(torch.sum(pos_edge_index)))"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["The pos_edge_index tensor has shape torch.Size([2, 78])\n","The pos_edge_index tensor has sum value 2535\n"]}]},{"cell_type":"markdown","metadata":{"id":"UBL-ZmdHWqIu"},"source":["## Question 6: Please implement following function that samples negative edges. Then answer which edges (edge_1 to edge_5) are the negative edges in the karate club network? (10 Points)\n","\n","\"Negative\" edges refer to the edges/links that do not exist in the graph. The term \"negative\" is borrowed from \"negative sampling\" in link prediction. It has nothing to do with the edge weights.\n","\n","For example, given an edge (src, dst), you should check that neither (src, dst) nor (dst, src) are edges in the Graph. If these hold true, then it is a negative edge."]},{"cell_type":"code","metadata":{"id":"9N8VT1f8-IJ8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529039641,"user_tz":-120,"elapsed":35,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"49772945-b7a3-49de-ab4f-34456d51f704"},"source":["import random\n","\n","def sample_negative_edges(G: nx.Graph, num_neg_samples: int) -> List[Tuple[int, int]]:\n","  # TODO: Implement the function that returns a list of negative edges.\n","  # The number of sampled negative edges is num_neg_samples. You do not\n","  # need to consider the corner case when the number of possible negative edges\n","  # is less than num_neg_samples. It should be ok as long as your implementation \n","  # works on the karate club network. In this implementation, self loops should \n","  # not be considered as either a positive or negative edge. Also, notice that \n","  # the karate club network is an undirected graph, if (0, 1) is a positive \n","  # edge, do you think (1, 0) can be a negative one?\n","\n","  neg_edge_list = []\n","  nodes = list(G.nodes())\n","  ############# Your code here ############\n","  while len(neg_edge_list) < num_neg_samples:\n","    # Randomly select two nodes\n","    node1, node2 = random.sample(nodes, 2)\n","\n","    # Check if the edge already exists or if it is a self-loop\n","    if not G.has_edge(node1, node2) and node1 != node2:\n","      # Append the negative edge to the list\n","      neg_edge_list.append((node1, node2))\n","  #########################################\n","  return neg_edge_list\n","\n","# Sample 78 negative edges\n","neg_edge_list = sample_negative_edges(G, len(pos_edge_list))\n","\n","# Transform the negative edge list to tensor\n","neg_edge_index = edge_list_to_tensor(neg_edge_list)\n","print(\"The neg_edge_index tensor has shape {}\".format(neg_edge_index.shape))\n","\n","# Which of following edges can be negative ones?\n","edge_1 = (7, 1)\n","edge_2 = (1, 33)\n","edge_3 = (33, 22)\n","edge_4 = (0, 4)\n","edge_5 = (4, 2)\n","\n","############# Your code here ############\n","## Note:\n","## 1: For each of the 5 edges, print whether it can be negative edge\n","for edge in [edge_1, edge_2, edge_3, edge_4, edge_5]:\n","  if edge in neg_edge_list:\n","    print(f\"The edge {edge} can be a negative edge\")\n","  else:\n","    print(f\"The edge {edge} cannot be a negative edge\")\n","\n","#########################################"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["The neg_edge_index tensor has shape torch.Size([2, 78])\n","The edge (7, 1) cannot be a negative edge\n","The edge (1, 33) cannot be a negative edge\n","The edge (33, 22) cannot be a negative edge\n","The edge (0, 4) cannot be a negative edge\n","The edge (4, 2) cannot be a negative edge\n"]}]},{"cell_type":"markdown","metadata":{"id":"Wk9Q-a-9qGsw"},"source":["# 3 Node Emebedding Learning\n","\n","Finally, we will finish the first learning algorithm on graphs: a node embedding model.\n"]},{"cell_type":"markdown","metadata":{"id":"NDBxRQcZ_dUH"},"source":["## Setup"]},{"cell_type":"code","metadata":{"id":"Lnqn9H6s_ehX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529040651,"user_tz":-120,"elapsed":1025,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"92126548-43ae-460b-f50c-0277c99e7a59"},"source":["import torch\n","import torch.nn as nn\n","import matplotlib.pyplot as plt\n","from sklearn.decomposition import PCA\n","\n","print(torch.__version__)"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["2.0.1+cu118\n"]}]},{"cell_type":"markdown","metadata":{"id":"6gomAf8vxq0R"},"source":["To write our own node embedding learning methods, we'll heavily use the [`nn.Embedding`](https://pytorch.org/docs/stable/generated/torch.nn.Embedding.html) module in PyTorch. Let's see how to use `nn.Embedding`:"]},{"cell_type":"code","metadata":{"id":"aRiWGuLAx5yx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529040653,"user_tz":-120,"elapsed":55,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"ca4d9a73-30b6-4833-8869-2d9439db4401"},"source":["# Initialize an embedding layer\n","# Suppose we want to have embedding for 4 items (e.g., nodes)\n","# Each item is represented with 8 dimensional vector\n","\n","emb_sample = nn.Embedding(num_embeddings=4, embedding_dim=8)\n","print('Sample embedding layer: {}'.format(emb_sample))"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Sample embedding layer: Embedding(4, 8)\n"]}]},{"cell_type":"markdown","metadata":{"id":"bS9qQfeujEVh"},"source":["We can select items from the embedding matrix, by using Tensor indices"]},{"cell_type":"code","metadata":{"id":"9AGIfP4QEDr8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529040655,"user_tz":-120,"elapsed":39,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"1aff672f-fc66-4fec-d42e-eb3c08e3e131"},"source":["# Select an embedding in emb_sample\n","id = torch.LongTensor([1])\n","print(emb_sample(id))\n","\n","# Select multiple embeddings\n","ids = torch.LongTensor([1, 3])\n","print(emb_sample(ids))\n","\n","# Get the shape of the embedding weight matrix\n","shape = emb_sample.weight.data.shape\n","print(shape)\n","\n","# Overwrite the weight to tensor with all ones\n","emb_sample.weight.data = torch.ones(shape)\n","\n","# Let's check if the emb is indeed initilized\n","ids = torch.LongTensor([0, 3])\n","print(emb_sample(ids))"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-0.1749,  0.7482,  0.0410,  0.4148,  1.8475,  2.4132,  1.0490, -0.8605]],\n","       grad_fn=<EmbeddingBackward0>)\n","tensor([[-0.1749,  0.7482,  0.0410,  0.4148,  1.8475,  2.4132,  1.0490, -0.8605],\n","        [-0.9758,  1.1489,  1.4877, -0.6353, -0.7610, -0.3197, -0.2699, -1.4925]],\n","       grad_fn=<EmbeddingBackward0>)\n","torch.Size([4, 8])\n","tensor([[1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1.]], grad_fn=<EmbeddingBackward0>)\n"]}]},{"cell_type":"markdown","metadata":{"id":"8MjBuDKaKIsM"},"source":["Now, it's your time to create node embedding matrix for the graph we have!\n","- We want to have **16 dimensional** vector for each node in the karate club network.\n","- We want to initalize the matrix under **uniform distribution**, in the range of $[0, 1)$. We suggest you using [`torch.rand`](https://pytorch.org/docs/stable/generated/torch.rand.html)."]},{"cell_type":"code","metadata":{"id":"hMszSwRPKGn1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529041187,"user_tz":-120,"elapsed":560,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"9b5b9949-d481-4706-d4c7-9d9a6c9ca889"},"source":["# Please do not change / reset the random seed\n","torch.manual_seed(1)\n","\n","def create_node_emb(num_node: int=34, embedding_dim: int=16) -> torch.nn.Embedding:\n","  # TODO: Implement this function that will create the node embedding matrix.\n","  # A torch.nn.Embedding layer will be returned. You do not need to change \n","  # the values of num_node and embedding_dim. The weight matrix of returned \n","  # layer should be initialized under uniform distribution. \n","\n","  emb = None\n","\n","  ############# Your code here ############\n","  emb = nn.Embedding(num_node, embedding_dim)\n","  torch.nn.init.uniform_(emb.weight)\n","\n","  #########################################\n","\n","  return emb\n","\n","emb = create_node_emb()\n","ids = torch.LongTensor([0, 3])\n","\n","# Print the embedding layer\n","print(\"Embedding: {}\".format(emb))\n","\n","# An example that gets the embeddings for node 0 and 3\n","print(emb(ids))"],"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Embedding: Embedding(34, 16)\n","tensor([[0.2114, 0.7335, 0.1433, 0.9647, 0.2933, 0.7951, 0.5170, 0.2801, 0.8339,\n","         0.1185, 0.2355, 0.5599, 0.8966, 0.2858, 0.1955, 0.1808],\n","        [0.7486, 0.6546, 0.3843, 0.9820, 0.6012, 0.3710, 0.4929, 0.9915, 0.8358,\n","         0.4629, 0.9902, 0.7196, 0.2338, 0.0450, 0.7906, 0.9689]],\n","       grad_fn=<EmbeddingBackward0>)\n"]}]},{"cell_type":"markdown","metadata":{"id":"4QfoANibTzyh"},"source":["## Visualize the initial node embeddings\n","One good way to understand an embedding matrix, is to visualize it in a 2D space.\n","Here, we have implemented an embedding visualization function for you.\n","We first do PCA to reduce the dimensionality of embeddings to a 2D space.\n","Then we visualize each point, colored by the community it belongs to."]},{"cell_type":"code","metadata":{"id":"_LCoIkarhfYD","colab":{"base_uri":"https://localhost:8080/","height":522},"executionInfo":{"status":"ok","timestamp":1684529041190,"user_tz":-120,"elapsed":53,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"d92984e3-4503-4800-b50e-738c3f251ebe"},"source":["def visualize_emb(emb: torch.nn.Embedding):\n","  X = emb.weight.data.numpy()\n","  pca = PCA(n_components=2)\n","  components = pca.fit_transform(X)\n","  plt.figure(figsize=(6, 6))\n","  club1_x = []\n","  club1_y = []\n","  club2_x = []\n","  club2_y = []\n","  for node in G.nodes(data=True):\n","    if node[1]['club'] == 'Mr. Hi':\n","      club1_x.append(components[node[0]][0])\n","      club1_y.append(components[node[0]][1])\n","    else:\n","      club2_x.append(components[node[0]][0])\n","      club2_y.append(components[node[0]][1])\n","  plt.scatter(club1_x, club1_y, color=\"red\", label=\"Mr. Hi\")\n","  plt.scatter(club2_x, club2_y, color=\"blue\", label=\"Officer\")\n","  plt.legend()\n","  plt.show()\n","\n","# Visualize the initial random embeddding\n","visualize_emb(emb)"],"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"bQIyuEz9ANb2"},"source":["## Question 7: Training the embedding! What is the best performance you can get? Please report both the best loss and accuracy on Gradescope. (20 Points)\n","\n","We want to optimize our embeddings for the task of classifying edges as positive or negative. Given an edge and the embeddings for each node, the dot product of the embeddings, followed by a sigmoid, should give us the likelihood of that edge being either positive (output of sigmoid > 0.5) or negative (output of sigmoid < 0.5).\n","\n","Note that we're using the functions you wrote in the previous questions, _as well as the variables initialized in previous cells_. If you're running into issues, make sure your answers to questions 1-6 are correct."]},{"cell_type":"code","metadata":{"id":"RDeQTNNxqH0j","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684529926974,"user_tz":-120,"elapsed":1472,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"0f9d335d-8caa-4346-ca9c-677c1244b0f0"},"source":["from torch.optim import SGD\n","import torch.nn as nn\n","\n","def accuracy(pred: torch.Tensor, label: torch.LongTensor) -> float:\n","  # TODO: Implement the accuracy function. This function takes the \n","  # pred tensor (the resulting tensor after sigmoid) and the label \n","  # tensor (torch.LongTensor). Predicted value greater than 0.5 will \n","  # be classified as label 1. Else it will be classified as label 0.\n","  # The returned accuracy should be rounded to 4 decimal places. \n","  # For example, accuracy 0.82956 will be rounded to 0.8296.\n","\n","  accu = 0.0\n","\n","  ############# Your code here ############\n","  accu = torch.sum((pred > 0.5).long() == label) / label.shape[0]\n","  accu = round(accu.item(), 4)\n","\n","  #########################################\n","\n","  return accu\n","\n","def train(emb: torch.nn.Embedding, loss_fn: torch.nn.BCELoss, sigmoid: nn.Sigmoid, train_label: torch.LongTensor, train_edge: torch.Tensor):\n","  # TODO: Train the embedding layer here. You can also change epochs and \n","  # learning rate. In general, you need to implement: \n","  # (1) Get the embeddings of the nodes in train_edge\n","  # (2) Dot product the embeddings between each node pair\n","  # (3) Feed the dot product result into sigmoid\n","  # (4) Feed the sigmoid output into the loss_fn\n","  # (5) Print both loss and accuracy of each epoch \n","  # (6) Update the embeddings using the loss and optimizer \n","  # (as a sanity check, the loss should decrease during training)\n","\n","  epochs = 500\n","  learning_rate = 0.1\n","\n","  optimizer = SGD(emb.parameters(), lr=learning_rate, momentum=0.9)\n","\n","  for i in range(epochs):\n","\n","    ############# Your code here ############\n","    optimizer.zero_grad()\n","    nodes = emb(train_edge.T)\n","    #dot = torch.sum(nodes[:,0,:] * nodes[:,1,:], dim=1)\n","    dot = torch.einsum(\"jk, jk -> j\", nodes[:,0,:], nodes[:,1,:])\n","    result = sigmoid(dot)\n","    loss = loss_fn(result, train_label)\n","    loss.backward()\n","\n","    optimizer.step()\n","\n","    print(f\"Epoch {i}, loss: {loss.item():.2}, accuracy: {accuracy(result, train_label):.2}\")\n","\n","\n","    \n","\n","    #########################################\n","\n","loss_fn = nn.BCELoss()\n","sigmoid = nn.Sigmoid()\n","\n","print(pos_edge_index.shape)\n","\n","# Generate the positive and negative labels\n","pos_label = torch.ones(pos_edge_index.shape[1], )\n","neg_label = torch.zeros(neg_edge_index.shape[1], )\n","\n","# Concat positive and negative labels into one tensor\n","train_label = torch.cat([pos_label, neg_label], dim=0)\n","\n","# Concat positive and negative edges into one tensor\n","# Since the network is very small, we do not split the edges into val/test sets\n","train_edge = torch.cat([pos_edge_index, neg_edge_index], dim=1)\n","print(train_edge.shape)\n","\n","train(emb, loss_fn, sigmoid, train_label, train_edge)"],"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([2, 78])\n","torch.Size([2, 156])\n","Epoch 0, loss: 0.017, accuracy: 1.0\n","Epoch 1, loss: 0.017, accuracy: 1.0\n","Epoch 2, loss: 0.017, accuracy: 1.0\n","Epoch 3, loss: 0.017, accuracy: 1.0\n","Epoch 4, loss: 0.017, accuracy: 1.0\n","Epoch 5, loss: 0.017, accuracy: 1.0\n","Epoch 6, loss: 0.017, accuracy: 1.0\n","Epoch 7, loss: 0.017, accuracy: 1.0\n","Epoch 8, loss: 0.017, accuracy: 1.0\n","Epoch 9, loss: 0.017, accuracy: 1.0\n","Epoch 10, loss: 0.017, accuracy: 1.0\n","Epoch 11, loss: 0.017, accuracy: 1.0\n","Epoch 12, loss: 0.017, accuracy: 1.0\n","Epoch 13, loss: 0.017, accuracy: 1.0\n","Epoch 14, loss: 0.017, accuracy: 1.0\n","Epoch 15, loss: 0.017, accuracy: 1.0\n","Epoch 16, loss: 0.017, accuracy: 1.0\n","Epoch 17, loss: 0.017, accuracy: 1.0\n","Epoch 18, loss: 0.016, accuracy: 1.0\n","Epoch 19, loss: 0.016, accuracy: 1.0\n","Epoch 20, loss: 0.016, accuracy: 1.0\n","Epoch 21, loss: 0.016, accuracy: 1.0\n","Epoch 22, loss: 0.016, accuracy: 1.0\n","Epoch 23, loss: 0.016, accuracy: 1.0\n","Epoch 24, loss: 0.016, accuracy: 1.0\n","Epoch 25, loss: 0.016, accuracy: 1.0\n","Epoch 26, loss: 0.016, accuracy: 1.0\n","Epoch 27, loss: 0.016, accuracy: 1.0\n","Epoch 28, loss: 0.016, accuracy: 1.0\n","Epoch 29, loss: 0.016, accuracy: 1.0\n","Epoch 30, loss: 0.016, accuracy: 1.0\n","Epoch 31, loss: 0.016, accuracy: 1.0\n","Epoch 32, loss: 0.016, accuracy: 1.0\n","Epoch 33, loss: 0.016, accuracy: 1.0\n","Epoch 34, loss: 0.016, accuracy: 1.0\n","Epoch 35, loss: 0.016, accuracy: 1.0\n","Epoch 36, loss: 0.016, accuracy: 1.0\n","Epoch 37, loss: 0.016, accuracy: 1.0\n","Epoch 38, loss: 0.016, accuracy: 1.0\n","Epoch 39, loss: 0.015, accuracy: 1.0\n","Epoch 40, loss: 0.015, accuracy: 1.0\n","Epoch 41, loss: 0.015, accuracy: 1.0\n","Epoch 42, loss: 0.015, accuracy: 1.0\n","Epoch 43, loss: 0.015, accuracy: 1.0\n","Epoch 44, loss: 0.015, accuracy: 1.0\n","Epoch 45, loss: 0.015, accuracy: 1.0\n","Epoch 46, loss: 0.015, accuracy: 1.0\n","Epoch 47, loss: 0.015, accuracy: 1.0\n","Epoch 48, loss: 0.015, accuracy: 1.0\n","Epoch 49, loss: 0.015, accuracy: 1.0\n","Epoch 50, loss: 0.015, accuracy: 1.0\n","Epoch 51, loss: 0.015, accuracy: 1.0\n","Epoch 52, loss: 0.015, accuracy: 1.0\n","Epoch 53, loss: 0.015, accuracy: 1.0\n","Epoch 54, loss: 0.015, accuracy: 1.0\n","Epoch 55, loss: 0.015, accuracy: 1.0\n","Epoch 56, loss: 0.015, accuracy: 1.0\n","Epoch 57, loss: 0.015, accuracy: 1.0\n","Epoch 58, loss: 0.015, accuracy: 1.0\n","Epoch 59, loss: 0.015, accuracy: 1.0\n","Epoch 60, loss: 0.015, accuracy: 1.0\n","Epoch 61, loss: 0.015, accuracy: 1.0\n","Epoch 62, loss: 0.014, accuracy: 1.0\n","Epoch 63, loss: 0.014, accuracy: 1.0\n","Epoch 64, loss: 0.014, accuracy: 1.0\n","Epoch 65, loss: 0.014, accuracy: 1.0\n","Epoch 66, loss: 0.014, accuracy: 1.0\n","Epoch 67, loss: 0.014, accuracy: 1.0\n","Epoch 68, loss: 0.014, accuracy: 1.0\n","Epoch 69, loss: 0.014, accuracy: 1.0\n","Epoch 70, loss: 0.014, accuracy: 1.0\n","Epoch 71, loss: 0.014, accuracy: 1.0\n","Epoch 72, loss: 0.014, accuracy: 1.0\n","Epoch 73, loss: 0.014, accuracy: 1.0\n","Epoch 74, loss: 0.014, accuracy: 1.0\n","Epoch 75, loss: 0.014, accuracy: 1.0\n","Epoch 76, loss: 0.014, accuracy: 1.0\n","Epoch 77, loss: 0.014, accuracy: 1.0\n","Epoch 78, loss: 0.014, accuracy: 1.0\n","Epoch 79, loss: 0.014, accuracy: 1.0\n","Epoch 80, loss: 0.014, accuracy: 1.0\n","Epoch 81, loss: 0.014, accuracy: 1.0\n","Epoch 82, loss: 0.014, accuracy: 1.0\n","Epoch 83, loss: 0.014, accuracy: 1.0\n","Epoch 84, loss: 0.014, accuracy: 1.0\n","Epoch 85, loss: 0.014, accuracy: 1.0\n","Epoch 86, loss: 0.014, accuracy: 1.0\n","Epoch 87, loss: 0.013, accuracy: 1.0\n","Epoch 88, loss: 0.013, accuracy: 1.0\n","Epoch 89, loss: 0.013, accuracy: 1.0\n","Epoch 90, loss: 0.013, accuracy: 1.0\n","Epoch 91, loss: 0.013, accuracy: 1.0\n","Epoch 92, loss: 0.013, accuracy: 1.0\n","Epoch 93, loss: 0.013, accuracy: 1.0\n","Epoch 94, loss: 0.013, accuracy: 1.0\n","Epoch 95, loss: 0.013, accuracy: 1.0\n","Epoch 96, loss: 0.013, accuracy: 1.0\n","Epoch 97, loss: 0.013, accuracy: 1.0\n","Epoch 98, loss: 0.013, accuracy: 1.0\n","Epoch 99, loss: 0.013, accuracy: 1.0\n","Epoch 100, loss: 0.013, accuracy: 1.0\n","Epoch 101, loss: 0.013, accuracy: 1.0\n","Epoch 102, loss: 0.013, accuracy: 1.0\n","Epoch 103, loss: 0.013, accuracy: 1.0\n","Epoch 104, loss: 0.013, accuracy: 1.0\n","Epoch 105, loss: 0.013, accuracy: 1.0\n","Epoch 106, loss: 0.013, accuracy: 1.0\n","Epoch 107, loss: 0.013, accuracy: 1.0\n","Epoch 108, loss: 0.013, accuracy: 1.0\n","Epoch 109, loss: 0.013, accuracy: 1.0\n","Epoch 110, loss: 0.013, accuracy: 1.0\n","Epoch 111, loss: 0.013, accuracy: 1.0\n","Epoch 112, loss: 0.013, accuracy: 1.0\n","Epoch 113, loss: 0.013, accuracy: 1.0\n","Epoch 114, loss: 0.013, accuracy: 1.0\n","Epoch 115, loss: 0.013, accuracy: 1.0\n","Epoch 116, loss: 0.012, accuracy: 1.0\n","Epoch 117, loss: 0.012, accuracy: 1.0\n","Epoch 118, loss: 0.012, accuracy: 1.0\n","Epoch 119, loss: 0.012, accuracy: 1.0\n","Epoch 120, loss: 0.012, accuracy: 1.0\n","Epoch 121, loss: 0.012, accuracy: 1.0\n","Epoch 122, loss: 0.012, accuracy: 1.0\n","Epoch 123, loss: 0.012, accuracy: 1.0\n","Epoch 124, loss: 0.012, accuracy: 1.0\n","Epoch 125, loss: 0.012, accuracy: 1.0\n","Epoch 126, loss: 0.012, accuracy: 1.0\n","Epoch 127, loss: 0.012, accuracy: 1.0\n","Epoch 128, loss: 0.012, accuracy: 1.0\n","Epoch 129, loss: 0.012, accuracy: 1.0\n","Epoch 130, loss: 0.012, accuracy: 1.0\n","Epoch 131, loss: 0.012, accuracy: 1.0\n","Epoch 132, loss: 0.012, accuracy: 1.0\n","Epoch 133, loss: 0.012, accuracy: 1.0\n","Epoch 134, loss: 0.012, accuracy: 1.0\n","Epoch 135, loss: 0.012, accuracy: 1.0\n","Epoch 136, loss: 0.012, accuracy: 1.0\n","Epoch 137, loss: 0.012, accuracy: 1.0\n","Epoch 138, loss: 0.012, accuracy: 1.0\n","Epoch 139, loss: 0.012, accuracy: 1.0\n","Epoch 140, loss: 0.012, accuracy: 1.0\n","Epoch 141, loss: 0.012, accuracy: 1.0\n","Epoch 142, loss: 0.012, accuracy: 1.0\n","Epoch 143, loss: 0.012, accuracy: 1.0\n","Epoch 144, loss: 0.012, accuracy: 1.0\n","Epoch 145, loss: 0.012, accuracy: 1.0\n","Epoch 146, loss: 0.012, accuracy: 1.0\n","Epoch 147, loss: 0.012, accuracy: 1.0\n","Epoch 148, loss: 0.012, accuracy: 1.0\n","Epoch 149, loss: 0.011, accuracy: 1.0\n","Epoch 150, loss: 0.011, accuracy: 1.0\n","Epoch 151, loss: 0.011, accuracy: 1.0\n","Epoch 152, loss: 0.011, accuracy: 1.0\n","Epoch 153, loss: 0.011, accuracy: 1.0\n","Epoch 154, loss: 0.011, accuracy: 1.0\n","Epoch 155, loss: 0.011, accuracy: 1.0\n","Epoch 156, loss: 0.011, accuracy: 1.0\n","Epoch 157, loss: 0.011, accuracy: 1.0\n","Epoch 158, loss: 0.011, accuracy: 1.0\n","Epoch 159, loss: 0.011, accuracy: 1.0\n","Epoch 160, loss: 0.011, accuracy: 1.0\n","Epoch 161, loss: 0.011, accuracy: 1.0\n","Epoch 162, loss: 0.011, accuracy: 1.0\n","Epoch 163, loss: 0.011, accuracy: 1.0\n","Epoch 164, loss: 0.011, accuracy: 1.0\n","Epoch 165, loss: 0.011, accuracy: 1.0\n","Epoch 166, loss: 0.011, accuracy: 1.0\n","Epoch 167, loss: 0.011, accuracy: 1.0\n","Epoch 168, loss: 0.011, accuracy: 1.0\n","Epoch 169, loss: 0.011, accuracy: 1.0\n","Epoch 170, loss: 0.011, accuracy: 1.0\n","Epoch 171, loss: 0.011, accuracy: 1.0\n","Epoch 172, loss: 0.011, accuracy: 1.0\n","Epoch 173, loss: 0.011, accuracy: 1.0\n","Epoch 174, loss: 0.011, accuracy: 1.0\n","Epoch 175, loss: 0.011, accuracy: 1.0\n","Epoch 176, loss: 0.011, accuracy: 1.0\n","Epoch 177, loss: 0.011, accuracy: 1.0\n","Epoch 178, loss: 0.011, accuracy: 1.0\n","Epoch 179, loss: 0.011, accuracy: 1.0\n","Epoch 180, loss: 0.011, accuracy: 1.0\n","Epoch 181, loss: 0.011, accuracy: 1.0\n","Epoch 182, loss: 0.011, accuracy: 1.0\n","Epoch 183, loss: 0.011, accuracy: 1.0\n","Epoch 184, loss: 0.011, accuracy: 1.0\n","Epoch 185, loss: 0.011, accuracy: 1.0\n","Epoch 186, loss: 0.011, accuracy: 1.0\n","Epoch 187, loss: 0.01, accuracy: 1.0\n","Epoch 188, loss: 0.01, accuracy: 1.0\n","Epoch 189, loss: 0.01, accuracy: 1.0\n","Epoch 190, loss: 0.01, accuracy: 1.0\n","Epoch 191, loss: 0.01, accuracy: 1.0\n","Epoch 192, loss: 0.01, accuracy: 1.0\n","Epoch 193, loss: 0.01, accuracy: 1.0\n","Epoch 194, loss: 0.01, accuracy: 1.0\n","Epoch 195, loss: 0.01, accuracy: 1.0\n","Epoch 196, loss: 0.01, accuracy: 1.0\n","Epoch 197, loss: 0.01, accuracy: 1.0\n","Epoch 198, loss: 0.01, accuracy: 1.0\n","Epoch 199, loss: 0.01, accuracy: 1.0\n","Epoch 200, loss: 0.01, accuracy: 1.0\n","Epoch 201, loss: 0.01, accuracy: 1.0\n","Epoch 202, loss: 0.01, accuracy: 1.0\n","Epoch 203, loss: 0.01, accuracy: 1.0\n","Epoch 204, loss: 0.01, accuracy: 1.0\n","Epoch 205, loss: 0.01, accuracy: 1.0\n","Epoch 206, loss: 0.01, accuracy: 1.0\n","Epoch 207, loss: 0.01, accuracy: 1.0\n","Epoch 208, loss: 0.01, accuracy: 1.0\n","Epoch 209, loss: 0.01, accuracy: 1.0\n","Epoch 210, loss: 0.01, accuracy: 1.0\n","Epoch 211, loss: 0.01, accuracy: 1.0\n","Epoch 212, loss: 0.0099, accuracy: 1.0\n","Epoch 213, loss: 0.0099, accuracy: 1.0\n","Epoch 214, loss: 0.0099, accuracy: 1.0\n","Epoch 215, loss: 0.0099, accuracy: 1.0\n","Epoch 216, loss: 0.0098, accuracy: 1.0\n","Epoch 217, loss: 0.0098, accuracy: 1.0\n","Epoch 218, loss: 0.0098, accuracy: 1.0\n","Epoch 219, loss: 0.0098, accuracy: 1.0\n","Epoch 220, loss: 0.0098, accuracy: 1.0\n","Epoch 221, loss: 0.0097, accuracy: 1.0\n","Epoch 222, loss: 0.0097, accuracy: 1.0\n","Epoch 223, loss: 0.0097, accuracy: 1.0\n","Epoch 224, loss: 0.0097, accuracy: 1.0\n","Epoch 225, loss: 0.0097, accuracy: 1.0\n","Epoch 226, loss: 0.0096, accuracy: 1.0\n","Epoch 227, loss: 0.0096, accuracy: 1.0\n","Epoch 228, loss: 0.0096, accuracy: 1.0\n","Epoch 229, loss: 0.0096, accuracy: 1.0\n","Epoch 230, loss: 0.0096, accuracy: 1.0\n","Epoch 231, loss: 0.0095, accuracy: 1.0\n","Epoch 232, loss: 0.0095, accuracy: 1.0\n","Epoch 233, loss: 0.0095, accuracy: 1.0\n","Epoch 234, loss: 0.0095, accuracy: 1.0\n","Epoch 235, loss: 0.0095, accuracy: 1.0\n","Epoch 236, loss: 0.0094, accuracy: 1.0\n","Epoch 237, loss: 0.0094, accuracy: 1.0\n","Epoch 238, loss: 0.0094, accuracy: 1.0\n","Epoch 239, loss: 0.0094, accuracy: 1.0\n","Epoch 240, loss: 0.0094, accuracy: 1.0\n","Epoch 241, loss: 0.0093, accuracy: 1.0\n","Epoch 242, loss: 0.0093, accuracy: 1.0\n","Epoch 243, loss: 0.0093, accuracy: 1.0\n","Epoch 244, loss: 0.0093, accuracy: 1.0\n","Epoch 245, loss: 0.0093, accuracy: 1.0\n","Epoch 246, loss: 0.0092, accuracy: 1.0\n","Epoch 247, loss: 0.0092, accuracy: 1.0\n","Epoch 248, loss: 0.0092, accuracy: 1.0\n","Epoch 249, loss: 0.0092, accuracy: 1.0\n","Epoch 250, loss: 0.0092, accuracy: 1.0\n","Epoch 251, loss: 0.0091, accuracy: 1.0\n","Epoch 252, loss: 0.0091, accuracy: 1.0\n","Epoch 253, loss: 0.0091, accuracy: 1.0\n","Epoch 254, loss: 0.0091, accuracy: 1.0\n","Epoch 255, loss: 0.0091, accuracy: 1.0\n","Epoch 256, loss: 0.0091, accuracy: 1.0\n","Epoch 257, loss: 0.009, accuracy: 1.0\n","Epoch 258, loss: 0.009, accuracy: 1.0\n","Epoch 259, loss: 0.009, accuracy: 1.0\n","Epoch 260, loss: 0.009, accuracy: 1.0\n","Epoch 261, loss: 0.009, accuracy: 1.0\n","Epoch 262, loss: 0.0089, accuracy: 1.0\n","Epoch 263, loss: 0.0089, accuracy: 1.0\n","Epoch 264, loss: 0.0089, accuracy: 1.0\n","Epoch 265, loss: 0.0089, accuracy: 1.0\n","Epoch 266, loss: 0.0089, accuracy: 1.0\n","Epoch 267, loss: 0.0089, accuracy: 1.0\n","Epoch 268, loss: 0.0088, accuracy: 1.0\n","Epoch 269, loss: 0.0088, accuracy: 1.0\n","Epoch 270, loss: 0.0088, accuracy: 1.0\n","Epoch 271, loss: 0.0088, accuracy: 1.0\n","Epoch 272, loss: 0.0088, accuracy: 1.0\n","Epoch 273, loss: 0.0087, accuracy: 1.0\n","Epoch 274, loss: 0.0087, accuracy: 1.0\n","Epoch 275, loss: 0.0087, accuracy: 1.0\n","Epoch 276, loss: 0.0087, accuracy: 1.0\n","Epoch 277, loss: 0.0087, accuracy: 1.0\n","Epoch 278, loss: 0.0087, accuracy: 1.0\n","Epoch 279, loss: 0.0086, accuracy: 1.0\n","Epoch 280, loss: 0.0086, accuracy: 1.0\n","Epoch 281, loss: 0.0086, accuracy: 1.0\n","Epoch 282, loss: 0.0086, accuracy: 1.0\n","Epoch 283, loss: 0.0086, accuracy: 1.0\n","Epoch 284, loss: 0.0086, accuracy: 1.0\n","Epoch 285, loss: 0.0085, accuracy: 1.0\n","Epoch 286, loss: 0.0085, accuracy: 1.0\n","Epoch 287, loss: 0.0085, accuracy: 1.0\n","Epoch 288, loss: 0.0085, accuracy: 1.0\n","Epoch 289, loss: 0.0085, accuracy: 1.0\n","Epoch 290, loss: 0.0085, accuracy: 1.0\n","Epoch 291, loss: 0.0084, accuracy: 1.0\n","Epoch 292, loss: 0.0084, accuracy: 1.0\n","Epoch 293, loss: 0.0084, accuracy: 1.0\n","Epoch 294, loss: 0.0084, accuracy: 1.0\n","Epoch 295, loss: 0.0084, accuracy: 1.0\n","Epoch 296, loss: 0.0084, accuracy: 1.0\n","Epoch 297, loss: 0.0084, accuracy: 1.0\n","Epoch 298, loss: 0.0083, accuracy: 1.0\n","Epoch 299, loss: 0.0083, accuracy: 1.0\n","Epoch 300, loss: 0.0083, accuracy: 1.0\n","Epoch 301, loss: 0.0083, accuracy: 1.0\n","Epoch 302, loss: 0.0083, accuracy: 1.0\n","Epoch 303, loss: 0.0083, accuracy: 1.0\n","Epoch 304, loss: 0.0082, accuracy: 1.0\n","Epoch 305, loss: 0.0082, accuracy: 1.0\n","Epoch 306, loss: 0.0082, accuracy: 1.0\n","Epoch 307, loss: 0.0082, accuracy: 1.0\n","Epoch 308, loss: 0.0082, accuracy: 1.0\n","Epoch 309, loss: 0.0082, accuracy: 1.0\n","Epoch 310, loss: 0.0081, accuracy: 1.0\n","Epoch 311, loss: 0.0081, accuracy: 1.0\n","Epoch 312, loss: 0.0081, accuracy: 1.0\n","Epoch 313, loss: 0.0081, accuracy: 1.0\n","Epoch 314, loss: 0.0081, accuracy: 1.0\n","Epoch 315, loss: 0.0081, accuracy: 1.0\n","Epoch 316, loss: 0.0081, accuracy: 1.0\n","Epoch 317, loss: 0.008, accuracy: 1.0\n","Epoch 318, loss: 0.008, accuracy: 1.0\n","Epoch 319, loss: 0.008, accuracy: 1.0\n","Epoch 320, loss: 0.008, accuracy: 1.0\n","Epoch 321, loss: 0.008, accuracy: 1.0\n","Epoch 322, loss: 0.008, accuracy: 1.0\n","Epoch 323, loss: 0.008, accuracy: 1.0\n","Epoch 324, loss: 0.0079, accuracy: 1.0\n","Epoch 325, loss: 0.0079, accuracy: 1.0\n","Epoch 326, loss: 0.0079, accuracy: 1.0\n","Epoch 327, loss: 0.0079, accuracy: 1.0\n","Epoch 328, loss: 0.0079, accuracy: 1.0\n","Epoch 329, loss: 0.0079, accuracy: 1.0\n","Epoch 330, loss: 0.0079, accuracy: 1.0\n","Epoch 331, loss: 0.0078, accuracy: 1.0\n","Epoch 332, loss: 0.0078, accuracy: 1.0\n","Epoch 333, loss: 0.0078, accuracy: 1.0\n","Epoch 334, loss: 0.0078, accuracy: 1.0\n","Epoch 335, loss: 0.0078, accuracy: 1.0\n","Epoch 336, loss: 0.0078, accuracy: 1.0\n","Epoch 337, loss: 0.0078, accuracy: 1.0\n","Epoch 338, loss: 0.0077, accuracy: 1.0\n","Epoch 339, loss: 0.0077, accuracy: 1.0\n","Epoch 340, loss: 0.0077, accuracy: 1.0\n","Epoch 341, loss: 0.0077, accuracy: 1.0\n","Epoch 342, loss: 0.0077, accuracy: 1.0\n","Epoch 343, loss: 0.0077, accuracy: 1.0\n","Epoch 344, loss: 0.0077, accuracy: 1.0\n","Epoch 345, loss: 0.0076, accuracy: 1.0\n","Epoch 346, loss: 0.0076, accuracy: 1.0\n","Epoch 347, loss: 0.0076, accuracy: 1.0\n","Epoch 348, loss: 0.0076, accuracy: 1.0\n","Epoch 349, loss: 0.0076, accuracy: 1.0\n","Epoch 350, loss: 0.0076, accuracy: 1.0\n","Epoch 351, loss: 0.0076, accuracy: 1.0\n","Epoch 352, loss: 0.0076, accuracy: 1.0\n","Epoch 353, loss: 0.0075, accuracy: 1.0\n","Epoch 354, loss: 0.0075, accuracy: 1.0\n","Epoch 355, loss: 0.0075, accuracy: 1.0\n","Epoch 356, loss: 0.0075, accuracy: 1.0\n","Epoch 357, loss: 0.0075, accuracy: 1.0\n","Epoch 358, loss: 0.0075, accuracy: 1.0\n","Epoch 359, loss: 0.0075, accuracy: 1.0\n","Epoch 360, loss: 0.0074, accuracy: 1.0\n","Epoch 361, loss: 0.0074, accuracy: 1.0\n","Epoch 362, loss: 0.0074, accuracy: 1.0\n","Epoch 363, loss: 0.0074, accuracy: 1.0\n","Epoch 364, loss: 0.0074, accuracy: 1.0\n","Epoch 365, loss: 0.0074, accuracy: 1.0\n","Epoch 366, loss: 0.0074, accuracy: 1.0\n","Epoch 367, loss: 0.0074, accuracy: 1.0\n","Epoch 368, loss: 0.0073, accuracy: 1.0\n","Epoch 369, loss: 0.0073, accuracy: 1.0\n","Epoch 370, loss: 0.0073, accuracy: 1.0\n","Epoch 371, loss: 0.0073, accuracy: 1.0\n","Epoch 372, loss: 0.0073, accuracy: 1.0\n","Epoch 373, loss: 0.0073, accuracy: 1.0\n","Epoch 374, loss: 0.0073, accuracy: 1.0\n","Epoch 375, loss: 0.0073, accuracy: 1.0\n","Epoch 376, loss: 0.0072, accuracy: 1.0\n","Epoch 377, loss: 0.0072, accuracy: 1.0\n","Epoch 378, loss: 0.0072, accuracy: 1.0\n","Epoch 379, loss: 0.0072, accuracy: 1.0\n","Epoch 380, loss: 0.0072, accuracy: 1.0\n","Epoch 381, loss: 0.0072, accuracy: 1.0\n","Epoch 382, loss: 0.0072, accuracy: 1.0\n","Epoch 383, loss: 0.0072, accuracy: 1.0\n","Epoch 384, loss: 0.0071, accuracy: 1.0\n","Epoch 385, loss: 0.0071, accuracy: 1.0\n","Epoch 386, loss: 0.0071, accuracy: 1.0\n","Epoch 387, loss: 0.0071, accuracy: 1.0\n","Epoch 388, loss: 0.0071, accuracy: 1.0\n","Epoch 389, loss: 0.0071, accuracy: 1.0\n","Epoch 390, loss: 0.0071, accuracy: 1.0\n","Epoch 391, loss: 0.0071, accuracy: 1.0\n","Epoch 392, loss: 0.0071, accuracy: 1.0\n","Epoch 393, loss: 0.007, accuracy: 1.0\n","Epoch 394, loss: 0.007, accuracy: 1.0\n","Epoch 395, loss: 0.007, accuracy: 1.0\n","Epoch 396, loss: 0.007, accuracy: 1.0\n","Epoch 397, loss: 0.007, accuracy: 1.0\n","Epoch 398, loss: 0.007, accuracy: 1.0\n","Epoch 399, loss: 0.007, accuracy: 1.0\n","Epoch 400, loss: 0.007, accuracy: 1.0\n","Epoch 401, loss: 0.0069, accuracy: 1.0\n","Epoch 402, loss: 0.0069, accuracy: 1.0\n","Epoch 403, loss: 0.0069, accuracy: 1.0\n","Epoch 404, loss: 0.0069, accuracy: 1.0\n","Epoch 405, loss: 0.0069, accuracy: 1.0\n","Epoch 406, loss: 0.0069, accuracy: 1.0\n","Epoch 407, loss: 0.0069, accuracy: 1.0\n","Epoch 408, loss: 0.0069, accuracy: 1.0\n","Epoch 409, loss: 0.0069, accuracy: 1.0\n","Epoch 410, loss: 0.0068, accuracy: 1.0\n","Epoch 411, loss: 0.0068, accuracy: 1.0\n","Epoch 412, loss: 0.0068, accuracy: 1.0\n","Epoch 413, loss: 0.0068, accuracy: 1.0\n","Epoch 414, loss: 0.0068, accuracy: 1.0\n","Epoch 415, loss: 0.0068, accuracy: 1.0\n","Epoch 416, loss: 0.0068, accuracy: 1.0\n","Epoch 417, loss: 0.0068, accuracy: 1.0\n","Epoch 418, loss: 0.0068, accuracy: 1.0\n","Epoch 419, loss: 0.0067, accuracy: 1.0\n","Epoch 420, loss: 0.0067, accuracy: 1.0\n","Epoch 421, loss: 0.0067, accuracy: 1.0\n","Epoch 422, loss: 0.0067, accuracy: 1.0\n","Epoch 423, loss: 0.0067, accuracy: 1.0\n","Epoch 424, loss: 0.0067, accuracy: 1.0\n","Epoch 425, loss: 0.0067, accuracy: 1.0\n","Epoch 426, loss: 0.0067, accuracy: 1.0\n","Epoch 427, loss: 0.0067, accuracy: 1.0\n","Epoch 428, loss: 0.0067, accuracy: 1.0\n","Epoch 429, loss: 0.0066, accuracy: 1.0\n","Epoch 430, loss: 0.0066, accuracy: 1.0\n","Epoch 431, loss: 0.0066, accuracy: 1.0\n","Epoch 432, loss: 0.0066, accuracy: 1.0\n","Epoch 433, loss: 0.0066, accuracy: 1.0\n","Epoch 434, loss: 0.0066, accuracy: 1.0\n","Epoch 435, loss: 0.0066, accuracy: 1.0\n","Epoch 436, loss: 0.0066, accuracy: 1.0\n","Epoch 437, loss: 0.0066, accuracy: 1.0\n","Epoch 438, loss: 0.0065, accuracy: 1.0\n","Epoch 439, loss: 0.0065, accuracy: 1.0\n","Epoch 440, loss: 0.0065, accuracy: 1.0\n","Epoch 441, loss: 0.0065, accuracy: 1.0\n","Epoch 442, loss: 0.0065, accuracy: 1.0\n","Epoch 443, loss: 0.0065, accuracy: 1.0\n","Epoch 444, loss: 0.0065, accuracy: 1.0\n","Epoch 445, loss: 0.0065, accuracy: 1.0\n","Epoch 446, loss: 0.0065, accuracy: 1.0\n","Epoch 447, loss: 0.0065, accuracy: 1.0\n","Epoch 448, loss: 0.0064, accuracy: 1.0\n","Epoch 449, loss: 0.0064, accuracy: 1.0\n","Epoch 450, loss: 0.0064, accuracy: 1.0\n","Epoch 451, loss: 0.0064, accuracy: 1.0\n","Epoch 452, loss: 0.0064, accuracy: 1.0\n","Epoch 453, loss: 0.0064, accuracy: 1.0\n","Epoch 454, loss: 0.0064, accuracy: 1.0\n","Epoch 455, loss: 0.0064, accuracy: 1.0\n","Epoch 456, loss: 0.0064, accuracy: 1.0\n","Epoch 457, loss: 0.0064, accuracy: 1.0\n","Epoch 458, loss: 0.0063, accuracy: 1.0\n","Epoch 459, loss: 0.0063, accuracy: 1.0\n","Epoch 460, loss: 0.0063, accuracy: 1.0\n","Epoch 461, loss: 0.0063, accuracy: 1.0\n","Epoch 462, loss: 0.0063, accuracy: 1.0\n","Epoch 463, loss: 0.0063, accuracy: 1.0\n","Epoch 464, loss: 0.0063, accuracy: 1.0\n","Epoch 465, loss: 0.0063, accuracy: 1.0\n","Epoch 466, loss: 0.0063, accuracy: 1.0\n","Epoch 467, loss: 0.0063, accuracy: 1.0\n","Epoch 468, loss: 0.0063, accuracy: 1.0\n","Epoch 469, loss: 0.0062, accuracy: 1.0\n","Epoch 470, loss: 0.0062, accuracy: 1.0\n","Epoch 471, loss: 0.0062, accuracy: 1.0\n","Epoch 472, loss: 0.0062, accuracy: 1.0\n","Epoch 473, loss: 0.0062, accuracy: 1.0\n","Epoch 474, loss: 0.0062, accuracy: 1.0\n","Epoch 475, loss: 0.0062, accuracy: 1.0\n","Epoch 476, loss: 0.0062, accuracy: 1.0\n","Epoch 477, loss: 0.0062, accuracy: 1.0\n","Epoch 478, loss: 0.0062, accuracy: 1.0\n","Epoch 479, loss: 0.0062, accuracy: 1.0\n","Epoch 480, loss: 0.0061, accuracy: 1.0\n","Epoch 481, loss: 0.0061, accuracy: 1.0\n","Epoch 482, loss: 0.0061, accuracy: 1.0\n","Epoch 483, loss: 0.0061, accuracy: 1.0\n","Epoch 484, loss: 0.0061, accuracy: 1.0\n","Epoch 485, loss: 0.0061, accuracy: 1.0\n","Epoch 486, loss: 0.0061, accuracy: 1.0\n","Epoch 487, loss: 0.0061, accuracy: 1.0\n","Epoch 488, loss: 0.0061, accuracy: 1.0\n","Epoch 489, loss: 0.0061, accuracy: 1.0\n","Epoch 490, loss: 0.0061, accuracy: 1.0\n","Epoch 491, loss: 0.006, accuracy: 1.0\n","Epoch 492, loss: 0.006, accuracy: 1.0\n","Epoch 493, loss: 0.006, accuracy: 1.0\n","Epoch 494, loss: 0.006, accuracy: 1.0\n","Epoch 495, loss: 0.006, accuracy: 1.0\n","Epoch 496, loss: 0.006, accuracy: 1.0\n","Epoch 497, loss: 0.006, accuracy: 1.0\n","Epoch 498, loss: 0.006, accuracy: 1.0\n","Epoch 499, loss: 0.006, accuracy: 1.0\n"]}]},{"cell_type":"markdown","metadata":{"id":"WX2PSXnTDiNi"},"source":["## Visualize the final node embeddings\n","Visualize your final embedding here! \n","You can visually compare the figure with the previous embedding figure. \n","After training, you should oberserve that the two classes are more evidently separated. \n","This is a great sanitity check for your implementation as well."]},{"cell_type":"code","metadata":{"id":"MtNgl4VhYKow","colab":{"base_uri":"https://localhost:8080/","height":522},"executionInfo":{"status":"ok","timestamp":1684529942248,"user_tz":-120,"elapsed":588,"user":{"displayName":"Krystof Saml","userId":"11431361113674022197"}},"outputId":"0c44127d-6a26-472d-a3df-7c4c209a2a0f"},"source":["# Visualize the final learned embedding\n","visualize_emb(emb)"],"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAgMAAAH5CAYAAAAcOj21AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAtDElEQVR4nO3df3RU9Z3/8ddlJAGEjFKjBGZC+CXVdXUpaottJLFYYHvcuNO4/Wptg/aocMAlS7db2XNWvt2znPT0cNqwLqvu2RV6TgvYbxzk7J6D1vXwI62ioptdFaHihjIJoaZaZyBqYif3+8c1gZBJyCRz5947n+fjnGmcO5/MvId0Zl7zuZ8flm3btgAAgLHGeV0AAADwFmEAAADDEQYAADAcYQAAAMMRBgAAMBxhAAAAwxEGAAAw3EVeFzCc3t5enTx5UlOmTJFlWV6XAwBAYNi2rdOnT2v69OkaN2747/6+DgMnT55UNBr1ugwAAAIrkUgoEokM28bXYWDKlCmSnCdSUlLicTUAAARHKpVSNBrt/ywdjq/DQN+pgZKSEsIAAACjMJLT7AwgBADAcIQBAAAMRxgAAMBwvh4zAAAIht7eXvX09HhdhnGKioouOG1wJAgDAIAx6enpUWtrq3p7e70uxTjjxo3TrFmzVFRUNKb7IQwAAEbNtm11dHQoFAopGo3m5FsqRqZvYb6Ojg6Vl5ePaXE+wgAAYNT+8Ic/6MMPP9T06dM1adIkr8sxTmlpqU6ePKk//OEPGj9+/KjvhwgHABi1dDotSWPupsbo9P279/0dRoswAAAYM/aP8Uau/t0JAwAAGI4wAACA4VwNA48++qiuvfba/r0FFi1apD179rj5kAAABMrx48dlWZZaWlo8q8HVMBCJRPSDH/xAr776qg4dOqRbbrlFNTU1evPNN918WABA0KTT0r590o4dzs8xDoi7kBUrVsiyLK1cuXLQbatXr5ZlWVqxYsWYHmPbtm265JJLMt5mWZaefvppSVI0GlVHR4euueaaMT3eWLgaBm677Tb96Z/+qebNm6crr7xSGzdu1OTJk3Xw4EE3Hxbwlzy/yQGBE49LFRVSdbV0113Oz4oK57iLotGodu7cqY8++qj/2Mcff6zt27ervLx82N/N5WqLoVBI06ZN00UXeTfbP29jBtLptHbu3Kmuri4tWrQoY5vu7m6lUqkBFyDQPHqTAwIjHpdqa6W2toHH29ud4y6+Vj73uc8pGo0qfs5jxONxlZeXa8GCBQPaVlVVac2aNaqvr9dll12mpUuX5qyOgj9NIEmvv/66Jk+erOLiYq1cuVK7du3S1VdfnbFtQ0ODwuFw/yUajbpdHuAeD9/kgEBIp6W1ayXbHnxb37H6eld70+69915t3bq1//oTTzyhe+65J2Pbn/zkJyoqKtKvfvUrPfbYY67V5AXXw8D8+fPV0tKil156SatWrVJdXZ0OHz6cse369euVTCb7L4lEwu3yAHf44E0O8L3m5sFh+Vy2LSUSTjuX3H333frlL3+p3/zmN/rNb36jX/3qV7r77rsztp03b55++MMfav78+Zo/f/6I7j+ZTGry5MmDLn7j+gmKoqIizZ07V5K0cOFCvfLKK9q8ebMef/zxQW2Li4tVXFzsdkmA+7J5k6uqyltZgK90dOS23SiUlpbqq1/9qrZt2ybbtvXVr35Vl112Wca2CxcuzPr+p0yZotdee23Q8Xnz5mV9X27K+2iF3t5edXd35/thgfzywZsc4HtlZbltN0r33nuv1qxZI0nasmXLkO0uvvjirO973Lhx/V+I/czVMLB+/XotX75c5eXlOn36tLZv3659+/bp2WefdfNhAe/55E0O8LXKSikSccbRZDqlZlnO7ZWVrpaxbNky9fT0yLKsnA4MDBJXxwy8++67+ta3vqX58+fry1/+sl555RU9++yzuvXWW918WMB7fW9yQ60bbllSNOr6mxzga6GQtHmz89/nv1b6rjc2Ou1cLSOkt956S4cPH1Yoi8f67Gc/q127drlYWf642jPwb//2b27ePeBffW9ytbXOm9q533ry+CYH+F4sJjU1OQNuzx1nE4k4r5FYLC9llJSUZP07R48eVTKZdKGa/LNsO1PfjD+kUimFw2Elk8lR/aEAz8Xjg9/kotG8vskBbvr444/V2tqqWbNmacKECaO/o3TaGVDb0eGcPqusJCyPwHD//tl8hnq33BFgglhMqqnhTQ64kFCImTUeIgwAbuNNDoDPsYUxAACGIwwAAGA4wgAAAIYjDAAAYDjCAAAAhiMMAABgOMIAAADD+PDDD/W1r31NJSUlsixLH3zwQcZjFRUVamxs9LrcUSEMAACMlUgkdO+992r69OkqKirSzJkztXbtWr333nv9bX7yk5+oublZL7zwgjo6OhQOhzMee+WVV3T//fd7+GxGj0WHAACe82I14v/93//VokWLdOWVV2rHjh2aNWuW3nzzTX33u9/Vnj17dPDgQU2dOlXvvPOOrrrqKl1zzTX9v5vpWGlpqav19vT0qKioyJ07t30smUzakuxkMul1KQCADD766CP78OHD9kcffTTq+3jqKduORGzb2dHLuUQiznE3LVu2zI5EIvaHH3444HhHR4c9adIke+XKlfbixYttSf2XxYsXZzxm27Y9c+ZM+8c//nH//fz+97+377//fvvyyy+3i4uL7T/6oz+y//3f/73/9ubmZvtLX/qSPWHCBDsSidgPPvigfebMmf7bZ86caf/93/+9/c1vftOeMmWKXVdXN+g5DPfvn81nKD0DAADPxOPO5p7nb5nX3u4cb2pyZ0+v999/X88++6w2btyoiRMnDrht2rRp+sY3vqEnn3xSb7/9ttavX6833nhD8Xi8/5v5Qw89NOjYuXp7e7V8+XKdPn1aP/3pTzVnzpwBWyS/8847WrZsmf7hH/5BTzzxhDo7O7VmzRqtWbNGW7du7b+fTZs26eGHH9aGDRty/49wDsIAAMAT6bSzqWemvXNt29ntu77e2esr16cM3n77bdm2rauuuirj7VdddZV+//vfK51Oa9KkSSoqKtK0adP6b8907Fz/+Z//qZdffllvvfWWrrzySknS7Nmz+29vaGjQN77xDdXX10uS5s2bp3/8x3/U4sWL9eijj/bvQHjLLbfoO9/5Ti6e8rAYQAgA8ERz88Ddvc9n21Ii4bRzi50pieRAS0uLIpFIfxA433//939r27Ztmjx5cv9l6dKl6u3tVWtra3+766+/3pX6zkfPAADAEx0duW2Xjblz58qyLL311lv68z//80G3v/XWW7r00ktHPSjw/FMP5ztz5oweeOAB/eVf/uWg28rLy/v/++KLLx7V42eLngEAgCfKynLbLhuf+cxndOutt+qf//mf9dFHHw247dSpU/rZz36mr3/967Isa1T3f+2116qtrU2//vWvM97+uc99TocPH9bcuXMHXVybMTAMwgAAwBOVlVIk4owNyMSypGjUaeeGf/qnf1J3d7eWLl2qAwcOKJFI6JlnntGtt96qGTNmaOPGjaO+78WLF+vmm2/W1772NT333HNqbW3Vnj179Mwzz0iSvve97+mFF17QmjVr1NLS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POB1KRij3/3ud0qn07riiisGHL/iiit06tQpj6pCvvT29qq+vl5f/OIXdc0113hdjutef/11TZ48WcXFxVq5cqV27dqlq6++2uuyXEMYyNJDDz0ky7KGvRw5cqS//Xe/+13913/9l37xi18oFArpW9/6luwArgCd7fOWpPb2di1btkx33HGH7rvvPo8qH5vRPG+gEK1evVpvvPGGdu7c6XUpeTF//ny1tLTopZde0qpVq1RXV6fDhw97XZZr2JsgS52dnXrvvfeGbTN79mwVFRUNOt7W1qZoNKoXXnghcN1N2T7vkydPqqqqSl/4whe0bds2jRsXzNw5mr/3tm3bVF9frw8++MDl6vKrp6dHkyZNUlNTk26//fb+43V1dfrggw+M6fWyLEu7du0a8G9Q6NasWaPdu3frwIEDmjVrltfleGLJkiWaM2eOHn/8ca9LccVFXhcQNKWlpSotLR3V7/b29kqSuru7c1lSXmTzvNvb21VdXa2FCxdq69atgQ0C0tj+3oWmqKhICxcu1PPPP9//Qdjb26vnn39ea9as8bY4uMK2bT344IPatWuX9u3bZ2wQkJz/rwfxvXukCAMueemll/TKK6/oS1/6ki699FK98847+ru/+zvNmTMncL0C2Whvb1dVVZVmzpypTZs2qbOzs/+2adOmeViZ+06cOKH3339fJ06cUDqdVktLiyRp7ty5mjx5srfF5ci6detUV1en66+/XjfeeKMaGxvV1dWle+65x+vSXHXmzBkdO3as/3pra6taWlo0depUlZeXe1iZu1avXq3t27dr9+7dmjJlSv/YkHA4rIkTJ3pcnXvWr1+v5cuXq7y8XKdPn9b27du1b98+Pfvss16X5h5vJzMUrv/5n/+xq6ur7alTp9rFxcV2RUWFvXLlSrutrc3r0ly1detWW1LGS6Grq6vL+Lz37t3rdWk59cgjj9jl5eV2UVGRfeONN9oHDx70uiTX7d27N+Pftq6uzuvSXDXUa3nr1q1el+aqe++91545c6ZdVFRkl5aW2l/+8pftX/ziF16X5SrGDAAAYLjgnswFAAA5QRgAAMBwhAEAAAxHGAAAwHCEAQAADEcYAADAcIQBAAAMRxgAAMBwhAEAAAxHGAAAwHCEAQAADPf/AWx5VEBBJgAiAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"FTNyrAoSVeq9"},"source":["# Submission"]},{"cell_type":"markdown","metadata":{"id":"E_E7J_GkVhY_"},"source":["In order to get credit, you must go submit your answers on Gradescope."]}]}